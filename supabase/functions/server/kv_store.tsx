/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

/* Table schema:
CREATE TABLE kv_store_896b3bbe (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/

// View at https://supabase.com/dashboard/project/tltkvnvmgwzsmygttnqq/database/tables

// This file provides a simple key-value interface for storing Figma Make data. It should be adequate for most small-scale use cases.
import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const client = () => {
  const supabaseUrl = Deno.env.get("SUPABASE_URL");
  const supabaseServiceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
  
  if (!supabaseUrl || !supabaseServiceRoleKey) {
    throw new Error("Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY environment variables");
  }
  
  return createClient(supabaseUrl, supabaseServiceRoleKey);
};

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  try {
    const supabase = client();
    const { error } = await supabase.from("kv_store_896b3bbe").upsert({
      key,
      value
    });
    if (error) {
      console.error("Error setting key-value pair:", error);
      throw new Error(`Failed to set key ${key}: ${error.message}`);
    }
  } catch (error) {
    console.error("Error in set function:", error);
    throw error;
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  try {
    const supabase = client();
    const { data, error } = await supabase.from("kv_store_896b3bbe").select("value").eq("key", key).maybeSingle();
    if (error) {
      console.error("Error getting key-value pair:", error);
      throw new Error(`Failed to get key ${key}: ${error.message}`);
    }
    return data?.value;
  } catch (error) {
    console.error("Error in get function:", error);
    throw error;
  }
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  try {
    const supabase = client();
    const { error } = await supabase.from("kv_store_896b3bbe").delete().eq("key", key);
    if (error) {
      console.error("Error deleting key-value pair:", error);
      throw new Error(`Failed to delete key ${key}: ${error.message}`);
    }
  } catch (error) {
    console.error("Error in del function:", error);
    throw error;
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  try {
    if (keys.length !== values.length) {
      throw new Error("Keys and values arrays must have the same length");
    }
    
    const supabase = client();
    const { error } = await supabase.from("kv_store_896b3bbe").upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
    if (error) {
      console.error("Error setting multiple key-value pairs:", error);
      throw new Error(`Failed to set multiple keys: ${error.message}`);
    }
  } catch (error) {
    console.error("Error in mset function:", error);
    throw error;
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys: string[]): Promise<any[]> => {
  try {
    const supabase = client();
    const { data, error } = await supabase.from("kv_store_896b3bbe").select("value").in("key", keys);
    if (error) {
      console.error("Error getting multiple key-value pairs:", error);
      throw new Error(`Failed to get multiple keys: ${error.message}`);
    }
    return data?.map((d) => d.value) ?? [];
  } catch (error) {
    console.error("Error in mget function:", error);
    throw error;
  }
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys: string[]): Promise<void> => {
  try {
    const supabase = client();
    const { error } = await supabase.from("kv_store_896b3bbe").delete().in("key", keys);
    if (error) {
      console.error("Error deleting multiple key-value pairs:", error);
      throw new Error(`Failed to delete multiple keys: ${error.message}`);
    }
  } catch (error) {
    console.error("Error in mdel function:", error);
    throw error;
  }
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix: string): Promise<any[]> => {
  try {
    const supabase = client();
    const { data, error } = await supabase.from("kv_store_896b3bbe").select("key, value").like("key", prefix + "%");
    if (error) {
      console.error("Error getting key-value pairs by prefix:", error);
      throw new Error(`Failed to get keys by prefix ${prefix}: ${error.message}`);
    }
    return data?.map((d) => d.value) ?? [];
  } catch (error) {
    console.error("Error in getByPrefix function:", error);
    throw error;
  }
};